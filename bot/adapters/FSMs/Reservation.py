from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.types import Message
from adapters.buttons import make_row_keyboard, available_days, available_time, agreement
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from aiogram import types
from aiogram.types import ReplyKeyboardRemove

from core.timetable import days_nums
from service.store import Excel_interactions, GoogleSheet_interactions
import core.timetable as tt
from ..buttons import get_timetable

from config import config

router = Router()


class Reservation_fsm(StatesGroup):
    day_selection = State()
    time_selection = State()
    acceptance = State()
    contact_sharing = State()
    tg_sharing = State()
    vk_sharing = State()

    async def clear(self) -> None:
        await self.set_state(state=None)
        await self.set_data({})


# Entrypoint handler for 'reserve'
@router.message(Command("reserve"))
async def entrypoint(message: Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å ",
        reply_markup=make_row_keyboard(available_days)
    )
    await state.set_state(Reservation_fsm.day_selection)


# Handler for day selection
@router.message(
    Reservation_fsm.day_selection,
    F.text.in_(available_days)
)
async def select_day(message: Message, state: FSMContext):
    await state.update_data(day=message.text.lower())
    user_data = await state.get_data()
    await message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{user_data['day']}'. –°–ø–∞—Å–∏–±–æ. –°–µ–π—á–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è",
        reply_markup=make_row_keyboard(available_time)
    )
    await state.set_state(Reservation_fsm.time_selection)


@router.message(Reservation_fsm.day_selection)
async def incorrect_day(message: Message):
    await message.answer(
        text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏!  \n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=make_row_keyboard(available_days)
    )


@router.message(
    Reservation_fsm.time_selection,
    F.text.in_(available_time)
)
async def select_time(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å  Telegram  –ø—Ä–æ—Ñ–∏–ª—å", request_contact=True))
    
    await state.update_data(time=message.text.lower())
    user_data = await state.get_data()
    await message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å '{user_data['day']}' –∏ –≤—Ä–µ–º—è '{user_data['time']}'.\n"
              "–°–µ–π—á–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –≤ Telegram",
              reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(Reservation_fsm.contact_sharing)


@router.message(Reservation_fsm.time_selection)
async def incorrect_time(message: Message):
    await message.answer(
        text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! \n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–æ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ",
        reply_markup=make_row_keyboard(available_time)
    )


# Handler for contact sharing
@router.message(
    Reservation_fsm.contact_sharing,
)
async def select_contact(message: Message, state: FSMContext):
    if not message.contact.user_id == message.from_user.id:
        builder = ReplyKeyboardBuilder()
        builder.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å  Telegram  –ø—Ä–æ—Ñ–∏–ª—å", request_contact=True))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=builder.as_markup(resize_keyboard=True))
    else:
        user_data = await state.get_data()
        await message.answer(
            text=f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å:</b> {user_data['day']}\n"
                 f"<b>–í—Ä–µ–º—è:</b> {user_data['time']} \n"
                 f"<b>Telegram profile:</b> <a href=\"tg://user?id={message.contact.user_id}\">{message.from_user.full_name}</a>.\n\n"
                 "<b>–ë—Ä–æ–Ω–∏—Ä—É–µ–º?</b>",
            reply_markup=make_row_keyboard(agreement)
        )
        await state.set_state(Reservation_fsm.acceptance)


# @router.message(Reservation_fsm.contact_sharing)
# async def incorrect_day(message: Message):
#     builder = ReplyKeyboardBuilder()
#     builder.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å  Telegram  –ø—Ä–æ—Ñ–∏–ª—å", request_contact=True))
#     await message.answer(
#         text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º Telegram, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º—É–∑—ã–∫–∞–Ω—Ç—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è üì≤",
#         request_contact=True,
#         reply_markup=builder.as_markup(resize_keyboard=True)
#     )


@router.message(
    Reservation_fsm.acceptance,
    F.text.in_(agreement)
)
async def final_reservation(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        user_data = await state.get_data()
        # timetable_xlsx = Excel_interactions(config.EXCEL_PATH)
        timetable_xlsx = GoogleSheet_interactions(CREDENTIALS_FILE=config.SERVICE_ACCOUNT_CREDENTIALS_PATH, spreadsheetId=config.SPREADSHEET_ID)
        # Translation (time, day) to excel cell (letter, number), should be decompose
        day_to_letter= { d.lower():chr(n+66) for n, d in enumerate(available_days)}
        time_to_number = { t:str(n+2) for n, t in enumerate(available_time) }

        pos = (day_to_letter[user_data['day']], time_to_number[user_data['time']])

        user_data = await state.get_data()
        timetable_xlsx.put(data=f'</code><a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a><code>', position=pos)
        await message.answer(
            text=f"–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(tt.get_timetable_pretty(), reply_markup=get_timetable())

    if message.text.lower() =='–Ω–µ—Ç':
        await message.answer(
            text=f"–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(tt.get_timetable_pretty(), reply_markup=get_timetable())
    await state.clear()


@router.message(Reservation_fsm.acceptance)
async def incorrect_day(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ë—Ä–æ–Ω–∏—Ä—É–µ–º?",
        reply_markup=make_row_keyboard(agreement)
    )
