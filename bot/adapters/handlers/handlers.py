from aiogram import types, Router



from aiogram import types
from aiogram.filters import Command

from aiogram import F


from core.entities import GENERAL_FUNCTIONALITY
import core.timetable as tt
from ..buttons import get_commands, get_timetable


router = Router()


@router.message(Command("start"))
async def process_start_command(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n"
                         "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã üòâ\n\n"
                         "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         "       <i>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:</i> /start \n"
                         "       <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø. —Ç–æ—á–∫–µ:</i> /info \n"
                         "       <i>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</i> /check_free_slots \n"
                         "       <i>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç:</i> /reserve \n"
                         "       <i>–û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å–ª–æ—Ç—ã:</i> /free_my_slots \n"
                         "       <i>–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:</i> /cancel \n\n",
                         reply_markup=get_commands())


@router.message(Command("info"))
async def process_info_command(message: types.Message):
    """
    This handler will be called when user sends `/info`
    """
    await message.answer(
                         "<i>–†–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–¥–∞–Ω–∏–∏ –î–ö–∏–ù \"–®–∞–π–±–∞\", –∫–∞–±–∏–Ω–µ—Ç 207</i>\n\n"
                         "–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Ä–µ–ø. —Ç–æ—á–∫—É:\n"
                         "1. <i>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã</i> /check_free_slots \n"
                         "2. <i>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É</i> /reserve \n"
                         "3. <i>–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ ___</i>\n\n"
                         "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n"
                         "       <i>–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞</i> \n"
                         "       <i>–ì–∏—Ç–∞—Ä–Ω—ã–π –∫–æ–º–±–∏–∫ x2 </i> \n"
                         "       <i>–ë–∞—Å–æ–≤—ã–π –∫–æ–º–±–∏–∫ x2 </i>\n"
                         "       <i>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –±–∞—Ä–∞–±–∞–Ω—ã </i> \n"
                         "       <i>–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã (–Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)</i> \n"
                         "       <i>–ú–∏–∫—à–µ—Ä (–Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)</i> \n\n"
                         "–ü–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º –Ω–µ –∑–∞–±—É–¥—å:\n"
                         "       <b>–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</b> \n"
                         "       <b>–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç</b> \n"
                         ,
                         reply_markup=get_commands())
router.message.register(process_info_command, F.text.in_(GENERAL_FUNCTIONALITY['info']))


@router.message(F.text.in_(GENERAL_FUNCTIONALITY['timetable']))
async def get_full_timetable(message: types.Message):
    await message.answer(str(tt.get_timetable_pretty()), reply_markup=get_timetable())


@router.message(Command("check_free_slots"))
async def check_free_slots(message: types.Message):
    await message.answer(tt.get_free_slots(), reply_markup=get_timetable())
router.message.register(check_free_slots, F.text.in_(GENERAL_FUNCTIONALITY['check_free_slots']))